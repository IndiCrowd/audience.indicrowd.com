<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:skin="com.indicrowd.audience.skin.*"
				xmlns:player="com.indicrowd.audience.player.*"
				width="480" height="360" minWidth="480" minHeight="360" horizontalAlign="center"
				backgroundColor="#000000"
				horizontalScrollPolicy="off" initialize="init()" layout="absolute"
				verticalScrollPolicy="off">
	<fx:Script>
		<![CDATA[
			import com.indicrowd.audience.player.VideoDisplay2State;
			import com.indicrowd.audience.player.VideoDisplay2StatusEvent;
			import com.indicrowd.audience.skin.VolumeEvent;
			
			import flash.utils.setTimeout;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.media.*;
			
			[Embed(source="assets/wait_mic.swf")]
			[Bindable]
			public var movWaitting:Class;   
			
			
			[Embed(source="../assets/wait.mp3")]
			[Bindable]
			public var mp3Waitting:Class;   
			
			public var waittingSound:mx.core.SoundAsset = new mp3Waitting() as mx.core.SoundAsset;
			public var waittingSoundChannel:SoundChannel;		

			public var nowState:String = "";			
			
			[Bindable]
			private var serverInfoURL:String = "/server/streaming/optimal.json";
			private var urlPrefix:String = "/IndiCrowd";
			[Bindable]
			private var serverVideoAddr:String;
			[Bindable]
			private var serverSubscribeStr:String;
			[Bindable]
			private var serverDefaltImage:String;
			[Bindable]
			private var remainTimeURL:String = "/concert/${concertId}/remainTime.json";
			[Bindable]
			private var concertStateURL:String = "/concert/${concertId}/state.json";
			
			[Bindable]
			private var waitMute:Boolean;
			
			private var videoEventsDisabled:Boolean = false;
			
			private var handleUpdateRemainTime:uint;
			private var handleWaitingSoundVolume:uint;
			
			private var canConnect:Boolean = false;
			
			private var remainTime:int = 0;
			
			public function setServerSubscribeStr(substr:String):void
			{
				serverSubscribeStr = substr;
			}
			
			
			public function setServerDefaultImage(img:String):void
			{
				serverDefaltImage = img;	
			}
			
			
			private function init():void
			{		
				var serverStreamStr:String = FlexGlobals.topLevelApplication.parameters.serverSubscribeStr;
				serverSubscribeStr =  "" +FlexGlobals.topLevelApplication.parameters.serverSubscribeStr + "";
				serverDefaltImage =  FlexGlobals.topLevelApplication.parameters.serverDefaltImage;
				urlPrefix =  FlexGlobals.topLevelApplication.parameters.urlPrefix;
				serverInfoURL = urlPrefix + serverInfoURL;
				concertStateURL = urlPrefix + concertStateURL;
				concertStateURL = concertStateURL.replace("${concertId}", serverStreamStr);
				remainTimeURL = urlPrefix + remainTimeURL;
				remainTimeURL = remainTimeURL.replace("${concertId}", serverStreamStr);
				
				handleUpdateRemainTime = setInterval(updateRemainTime, 1000);
				
				// Callback 함수 등록
				flash.external.ExternalInterface.addCallback("setServerSubscribeStr", setServerSubscribeStr);
				flash.external.ExternalInterface.addCallback("setServerDefaultImage", setServerDefaultImage);
				flash.external.ExternalInterface.addCallback("changeState", changeState);
				
				//Full screen
				systemManager.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullscreenHandler);
				
				serverInfoService.send();
				concertStateService.send();
				
				ctrlVolume.volume = 1.0;
			}
			
			private function fullscreenHandler(evt:FullScreenEvent):void {
				if (evt.fullScreen)
				{
					imgScreenNarrow.visible = true;
					imgScreenExapnd.visible = false;
					
					width = systemManager.stage.fullScreenWidth;
					height = systemManager.stage.fullScreenHeight;
					
				} else {
					imgScreenNarrow.visible = false;
					imgScreenExapnd.visible = true;
					width = 480;
					height = 360;
				}
			}
			
			private function clickFullscreenHandler(evt:MouseEvent):void {
				try {
					switch (systemManager.stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							systemManager.stage.displayState = StageDisplayState.NORMAL;
							break;
						default:
							systemManager.stage.displayState = StageDisplayState.FULL_SCREEN;
							break;
					}
				} catch (err:SecurityError) {
					// ignore
				}
			}
			
			private function updateRemainTime():void
			{
				var remainTimeText:String = "";
				this.remainTime--;
				
				
				if (nowState == "RESERVE" || nowState == "REHEARSAL") 
				{
					var hours:int = remainTime / 3600;
					var minutes:int = (remainTime % 3600 ) / 60 ;
					var seconds:int = (remainTime % 3600 ) % 60;
					
					if (hours != 0)
					{
						if ( hours < 10 ) {
							remainTimeText += "0";
						}
						remainTimeText += hours + ":";
					}
					
					
					if ( minutes < 10 ) {
						remainTimeText += "0";
					}
					remainTimeText += minutes + ":";
					
					
					if ( seconds < 10 ) {
						remainTimeText += "0";
					}
					remainTimeText += seconds;
					
					if (remainTime < 0 ) {
						remainTimeText = "00:00:00";
					}
					
					setTextMessage("공연까지 아직 시간이 남았습니다.\n" + remainTimeText);
				} 
				else if (nowState == "PLAYING") 
				{
					if (remainTime == 300) // 5분
					{
						lblNotice.text = "5분 남았습니다! 좀 더 응원해봐요!!";
						showNotice.play();
					} 
					else if (remainTime == 60) // 1분
					{
						lblNotice.text = "마지막 1분입니다!";
						showNotice.play();
					}
				} 
				else if (nowState == "ENCORE")
				{
				}
			}
			
			private function changeState(state:String):void {
				if (waittingSoundChannel != null)
				{
					waittingSoundChannel.stop();
					waittingSoundChannel = null;
				}
				
				if (state == "PLAYING" || state == "ENCORE")
				{	
					this.videoEventsDisabled = false;
					setTextMessage("현재 방송중이 아닙니다.");
					
					if (nowState != "PLAYING" && nowState != "ENCORE") {
						canConnect = true;
						studioVideo.connect();
					}
					
				}
				else if (state == "RESERVE" || state == "REHEARSAL") 
				{
					waittingSoundChannel = playWaitSound();
					setTextMessage("공연까지 아직 시간이 남았습니다.");
				}
				else if (state == "END") 
				{
					waittingSoundChannel = playWaitSound();
					waittingDlg.visible = true;
					this.videoEventsDisabled = true;
					setTextMessage("즐거운 공연이 되었나요?\n공연이 끝났습니다.");
				}
				else 
				{
					this.studioVideo.source = null;
					waittingDlg.visible = true;
					this.videoEventsDisabled = true;
					setTextMessage("잘 못된 접속입니다.");
				}
				
				nowState = state;
				
				remainTimeService.send();
			}
			
			private function readServerInfo(event:ResultEvent):void
			{				
				var result:Object = JSON.parse(event.result as String);
				
				serverVideoAddr = "rtmp://" + result.command.hostname + ":" + result.command.rtmpPort + "/live";
				
				studioVideo.source = serverVideoAddr;
				
				if (canConnect)
				{
					studioVideo.connect();
				}
			}
			
			
			private function readConcertState(event:ResultEvent):void
			{				
				var result:Object = JSON.parse(event.result as String);
				
				changeState(result.command);
			}
			
			
			private function readRemainTime(event:ResultEvent):void
			{				
				var result:Object = JSON.parse(event.result as String);
				
				// 시각 등록
				remainTime =  parseInt(result.long) / 1000;
				trace("remainTime : " + remainTime);
			}
			
			private function setTextMessage(message:String):void {
				lblStateU.text = message;
				lblStateD.text = message;
			}
			
			private function playWaitSound():SoundChannel {
				if (this.waittingSoundChannel != null) {
					return this.waittingSoundChannel;
				}
				
				var waittingSoundChannel:SoundChannel = waittingSound.play(0, int.MAX_VALUE, new SoundTransform(0, 0));
				
				clearInterval(handleWaitingSoundVolume);
				handleWaitingSoundVolume = setInterval(playWaitVolumeControl, 200);
				
				return waittingSoundChannel;
			}
			
			
			private function playWaitVolumeControl():void {
				
				if (waittingSoundChannel == null) {
					clearInterval(handleWaitingSoundVolume);
					return ;
				}
				
				if (waittingSoundChannel.soundTransform.volume < 0.3) {
					waittingSoundChannel.soundTransform = new SoundTransform(0.025 + waittingSoundChannel.soundTransform.volume, 0);
				} else {
					clearInterval(handleWaitingSoundVolume);
				}
			}
			
			protected function changeVolumeHandler(event:VolumeEvent):void
			{
				if (event.obj as Number == 0.0) {
					waitMute = true;
					
					if (waitMute || nowState == "PLAYING" || nowState == "ENCORE") {
						if (waittingSoundChannel != null)
						{
							waittingSoundChannel.stop();
							waittingSoundChannel = null;
						}
					}
					
				} else { 
					waitMute = false;
					if (!(nowState == "PLAYING" || nowState == "ENCORE")) {
						if (waittingSoundChannel == null) {
							waittingSoundChannel = playWaitSound();
						}
					}
				}
				
				SoundMixer.soundTransform = new SoundTransform(event.obj as Number);
			}
			
			protected function WevService_faultHandler(event:FaultEvent):void
			{
				lblEndMark.visible = true;
			}
			
			protected function studioVideo_changeStateHandler(event:VideoDisplay2StatusEvent):void
			{
				switch (event.state) 
				{
					case VideoDisplay2State.PLAY:
						lblLiveMark.visible = true;
						waittingDlg.visible = false;
						
						break;
					case VideoDisplay2State.STOP:
						lblLiveMark.visible = false;
						waittingDlg.visible = true;
						
						break;
					case VideoDisplay2State.FAULT:
						lblLiveMark.visible = false;
						waittingDlg.visible = true;
						lblEndMark.visible = true;
						
						break;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Sequence id="showNotice" target="{lblNotice}">
			<s:Fade duration="1000"	alphaFrom="0" alphaTo="1"/>
			<s:Fade duration="2000"	alphaFrom="1" alphaTo="0"/>	
		</s:Sequence>
		<mx:HTTPService id="serverInfoService" url="{serverInfoURL}" useProxy="false" method="GET" fault="WevService_faultHandler(event)" result="readServerInfo(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
		<mx:HTTPService id="concertStateService" url="{concertStateURL}" useProxy="false" method="GET" result="readConcertState(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
		<mx:HTTPService id="remainTimeService" url="{remainTimeURL}" useProxy="false" method="GET" result="readRemainTime(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
	</fx:Declarations>
	<player:VideoDisplay2 id="studioVideo" horizontalCenter="0" width="{height/3*4}" height="100%" streamName="{serverSubscribeStr}" changeState="studioVideo_changeStateHandler(event)"/>
	<s:Group id="waittingDlg" x="0" y="0" width="100%" height="100%">
		<mx:SWFLoader id="waittingMovie" top="0" width="{height/3*4}" height="100%" horizontalCenter="0"
					  source="{movWaitting}"/>
		<s:Label id="lblStateU" backgroundAlpha="1.0" color="#000000" fontFamily="NanumGothic" fontSize="27"
				 fontWeight="bold" horizontalCenter="0" text="현재 방송중이 아닙니다!" textAlign="center"
				 verticalAlign="middle" verticalCenter="0"/>
		<s:Label id="lblStateD"  backgroundAlpha="1.0" color="#FFFFFF" fontFamily="NanumGothic" fontSize="27"
				 fontWeight="bold" horizontalCenter="-2" text="현재 방송중이 아닙니다!" textAlign="center"
				 verticalAlign="middle" verticalCenter="-2"/>
	</s:Group>
	<s:Label id="lblLiveMark" visible="false" x="0" y="0" width="60" height="31"
			 backgroundColor="#FF0000" color="#FFFFFF" fontFamily="Arial" fontSize="16"
			 fontWeight="bold" text="LIVE" textAlign="center" verticalAlign="middle"/>
	<skin:VolumeGroup id="ctrlVolume" left="25" bottom="0"
					  changeVolume="changeVolumeHandler(event)" />
	<skin:VisualSoundSpectrum right="0" bottom="0"/>
	<s:Label id="lblResolution" x="7" y="311" />
	
	<s:Label id="lblNotice" top="10" color="#FFFFFF" fontSize="23" fontWeight="bold"
			 horizontalCenter="0" textAlign="center" verticalAlign="middle"/>
	
	<s:Label id="lblEndMark" visible="false" color="#FFFFFF" fontFamily="Arial"
			 fontSize="12" fontWeight="bold" text="통신 상황이 좋지 않습니다. &#xd;인터넷 상태를 다시 확인하시고 리프레쉬해주세요. &#xd;반복해서 발생하면 관리자에게 연락해주세요." textAlign="center" verticalAlign="middle"/>
	<s:Group left="0" bottom="0" width="25" height="25"  click="clickFullscreenHandler(event)">
		<s:Rect width="25" height="25">
			<s:fill>
				<s:SolidColor color="#EEEEEE" alpha=".8" />
			</s:fill>
		</s:Rect>
		<s:Image id="imgScreenExapnd" visible="true" x="3" y="3" width="19" height="19" source="@Embed(source='assets/screen_expand.png')"/>
		<s:Image id="imgScreenNarrow" visible="false" x="3" y="3"  width="19" height="19" source="@Embed(source='assets/screen_narrow.png')"/>
	</s:Group>

</mx:Application>