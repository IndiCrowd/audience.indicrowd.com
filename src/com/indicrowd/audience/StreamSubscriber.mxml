<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				width="480" height="360" minWidth="480" minHeight="360" horizontalAlign="center"
				initialize="init()" layout="absolute">
	<fx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			import mx.core.FlexGlobals;
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.media.*;
			
			[Bindable]
			private var serverInfoURL:String = "/server/optimal";
			private var urlPrefix:String = "/IndiCrowd";
			[Bindable]
			private var serverVideoAddr:String;
			[Bindable]
			private var serverSubscribeStr:String;
			[Bindable]
			private var serverDefaltImage:String;
			
			private var videoEventsDisabled:Boolean = false;
			
			public function setServerSubscribeStr(substr:String):void
			{
				serverSubscribeStr = substr;
			}
			
			
			public function setServerDefaultImage(img:String):void
			{
				serverDefaltImage = img;	
			}
			
			
			public function playStudioVideo():void
			{
				connectServerVideo();
			}
			
			private function init():void
			{		
				serverSubscribeStr =  "" +FlexGlobals.topLevelApplication.parameters.serverSubscribeStr + "_360p";
				serverDefaltImage =  FlexGlobals.topLevelApplication.parameters.serverDefaltImage;
				urlPrefix =  FlexGlobals.topLevelApplication.parameters.urlPrefix;
				serverInfoURL = urlPrefix + serverInfoURL;
				
				// Callback 함수 등록
				flash.external.ExternalInterface.addCallback("setServerSubscribeStr", setServerSubscribeStr);
				flash.external.ExternalInterface.addCallback("setServerDefaultImage", setServerDefaultImage);
				flash.external.ExternalInterface.addCallback("playStudioVideo", playStudioVideo);
				
				serverInfoService.send();
			}
			
			private function connectServerVideo():void
			{
				studioVideo.play();
			}
			
			private function ncOnStatus(infoObject:NetStatusEvent):void
			{
				trace("nc: "+infoObject.info.code+" ("+infoObject.info.description+")");
				
				if (infoObject.info.code == "NetConnection.Connect.Failed")
				{
					// 접속 실패
				} else if (infoObject.info.code == "NetConnection.Connect.Rejected") {
					// 연결 거부
				} else if (infoObject.info.code == "NetConnection.Connect.Success") {
					
				}
			}
			
			
			protected function studioVideo_mediaPlayerStateChangeHandler(event:MediaPlayerStateChangeEvent):void
			{
				if (this.videoEventsDisabled)
				{
					return;
				}
				
				//something went wrong
				if (event.state ==  MediaPlayerState.PLAYBACK_ERROR)
				{
					resetVideo();
				}
			}
			
			private function resetVideo():void
			{
				this.videoEventsDisabled = true;
				var videoSource:DynamicStreamingVideoSource = this.studioVideo.source as DynamicStreamingVideoSource;

				setTimeout(resetVideoSource, 1000, videoSource);
			}
			
			private function resetVideoSource(videoSource:DynamicStreamingVideoSource):void
			{
				this.videoEventsDisabled = false;
				this.studioVideo.source = videoSource;
			}
			
			private function readServerInfo(event:ResultEvent):void
			{				
				var result:Object = JSON.parse(event.result as String);
				
				serverVideoAddr = "rtmp://" + result.command.hostname + ":" + result.command.rtmpPort + "/live";
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService id="serverInfoService" url="{serverInfoURL}" useProxy="false" method="GET" result="readServerInfo(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
	</fx:Declarations>
	<s:VideoDisplay id="studioVideo" x="0" y="0" width="480" height="360"
					mediaPlayerStateChange="studioVideo_mediaPlayerStateChangeHandler(event)"  >
		<s:source>
			<s:DynamicStreamingVideoSource id="videoSource" streamType="live" host="{serverVideoAddr}">
				<s:DynamicStreamingVideoItem streamName="{serverSubscribeStr}" />
			</s:DynamicStreamingVideoSource>
		</s:source>
	</s:VideoDisplay>
</mx:Application>
